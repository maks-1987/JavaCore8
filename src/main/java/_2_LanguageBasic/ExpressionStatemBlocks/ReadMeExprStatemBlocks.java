package _2_LanguageBasic.ExpressionStatemBlocks;

/**
 * Операторы могут использоваться при построении выражений,
 * которые вычисляют значения; выражения являются основными
 * компонентами утверждений; операторы могут быть сгруппированы
 * в блоки.
 * Выражение - это конструкция, состоящая из переменных,
 * операторов и вызовов методов, которые составляются в
 * соответствии с синтаксисом языка, который оценивается в
 * одно значение.
 * Тип данных значения, возвращаемого выражением, зависит
 * от элементов, используемых в выражении. Выражение cadence=0
 * возвращает int, потому что оператор присваивания возвращает
 * значение того же типа данных, что и его левый операнд;
 * Как видно из других выражений, выражение может возвращать
 * и другие типы значений, такие как логические или String.
 * Java позволяет создавать составные выражения из различных
 * меньших выражений, если тип данных, требуемый одной частью
 * выражения, совпадает с типом данных другой. Вот пример составного
 * выражения:
 *      1 * 2 * 3
 * В этом конкретном примере порядок вычисления выражения
 * не имеет значения, поскольку результат умножения не зависит
 * от порядка; результат всегда один и тот же, независимо от
 * того, в каком порядке вы применяете умножения. Однако это
 * не относится ко всем выражениям. Например, следующее выражение
 * дает разные результаты в зависимости от того, выполняете ли
 * вы сначала операцию сложения или деления:
 *      x + y / 100    // двусмысленное
 * Вы можете точно указать, как выражение будет оцениваться,
 * используя сбалансированные скобки: (и). Например, чтобы
 * сделать предыдущее выражение однозначным, вы можете написать
 * следующее:
 *      (x + y) / 100
 * Если вы не указываете явно порядок операций, которые должны
 * быть выполнены, порядок определяется приоритетом, назначенным
 * операторам, используемым в выражении. Операторы с более высоким
 * приоритетом оцениваются первыми. Например, оператор деления
 * имеет более высокий приоритет, чем оператор сложения.
 * Следовательно, следующие два утверждения эквивалентны:
 *      x + y / 100
 *      x + (y / 100)
 * ---------------------------------------------------------------
 * Statements примерно эквивалентны предложениям (sentences)
 * на естественных языках. Оператор формирует законченную единицу
 * исполнения. Следующие типы выражений могут быть превращены
 * в оператор, заканчивая выражение точкой с запятой (;).
     * Assignment expressions (Присвоение выражений)
     * Any use of ++ or --
     * Method invocations (Вызов метода)
     * Object creation expressions (Выражения создания объекта)
 * Такие заявления (statements) называются выражениями высказываний
 * (expression statements). Вот несколько примеров выражений.
     * // assignment statement
     * aValue = 8933.234;
     * // increment statement
     * aValue++;
     * // method invocation statement
     * System.out.println("Hello World!");
     * // object creation statement
     * Bicycle myBike = new Bicycle();
 * Помимо операторов выражений, есть два других типа операторов:
 * операторы объявлений и операторы потока управления. Оператор
 * объявления объявляет переменную.
 * Наконец, операторы потока управления регулируют порядок
 * выполнения операторов.
 * ------------------------------------------------------------------
 * Блоки
 * Блок - это группа из нуля или более операторов между сбалансированными
 * скобками, и его можно использовать везде, где разрешен
 * один оператор. Следующий пример, BlockDemo, иллюстрирует
 * использование блоков:
 */
class BlockDemo {
    public static void main(String[] args) {
        boolean condition = true;
        if (condition) { // begin block 1
            System.out.println("Condition is true.");
        } // end block one
        else { // begin block 2
            System.out.println("Condition is false.");
        } // end block 2
    }
}

public class ReadMeExprStatemBlocks {
}
