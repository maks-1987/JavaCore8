package _2_LanguageBasic.Variables;

/**
 * Массив - это контейнерный объект, который содержит фиксированное
 * количество значений одного типа. Длина массива устанавливается
 * при его создании. После создания его длина фиксируется.
 * Каждый элемент в массиве называется элементом, и каждый элемент доступен по его числовому индексу. Например, 9-й элемент будет доступен по индексу 8.
 * Следующая программа, ArrayDemo, создает массив целых чисел, помещает некоторые значения в массив и печатает каждое значение в стандартный вывод.
 */
public class ArrayDataType {
    public static void main(String[] args) {
        // declare an array of integers
        int[] anArray;

        // allocates memory for 10 integers
        anArray = new int[10];

        // initialise first element
        anArray[0] = 100;
        // init. second el.
        anArray[1] = 200;
        // and so forth
        anArray[2] = 300;
        anArray[3] = 400;
        anArray[4] = 500;
        anArray[5] = 600;
        anArray[6] = 700;
        anArray[7] = 800;
        anArray[8] = 900;
        anArray[9] = 1000;

        System.out.println("Elem at index 0: " +anArray[0]);
        System.out.println("Elem at index 0: " +anArray[1]);
        System.out.println("Elem at index 0: " +anArray[2]);
    }
}
/**
 * Elem at index 0: 100
 * Elem at index 0: 200
 * Elem at index 0: 300
 * ---------------------------------------------------------
 * Declaring a Variable to Refer to an Array
 * Как и объявления для переменных других типов, объявление массива имеет два компонента: тип массива и имя массива. Тип массива записывается как type [], где type - тип данных содержащихся элементов; скобки - это специальные символы, указывающие, что эта переменная содержит массив. Размер массива не является частью его типа (поэтому квадратные скобки пусты). Имя массива может быть любым, если вы хотите, при условии, что оно соответствует правилам и соглашениям, как уже обсуждалось в разделе именования. Как и с переменными других типов, объявление фактически не создает массив; он просто сообщает компилятору, что эта переменная будет содержать массив указанного типа.
 * Вы также можете поместить скобки после имени массива:
 *      // эта форма не рекомендуется
 *      float anArrayOfFloats[];
 * Тем не менее, конвенция препятствует этой форме; скобки обозначают тип массива и должны отображаться с обозначением типа.
 *
 * -----Creating, Initializing, and Accessing an Array-----
 * Создание, инициализация и доступ к
 * Один из способов создать массив - использовать оператор new. Следующий оператор в программе ArrayDemo выделяет массив с достаточным объемом памяти для 10 целочисленных элементов и присваивает массив переменной anArray.
 * Каждый элемент массива доступен по его числовому индексу
 * Кроме того, вы можете использовать синтаксис ярлыка для создания и инициализации массива
     * int[] anArray = {
     *     100, 200, 300,
     *     400, 500, 600,
     *     700, 800, 900, 1000
     * };
 * Здесь длина массива определяется количеством значений, заключенных в фигурные скобки и разделенных запятыми.
 * Вы также можете объявить массив массивов (также известный как многомерный массив) с помощью двух или более наборов скобок, таких как имена String [] []. Следовательно, каждый элемент должен иметь доступ к соответствующему количеству значений индекса.
 * В Java многомерный массив - это массив, компоненты которого сами являются массивами. Это не похоже на массивы в C или Fortran. Следствием этого является то, что длина строк может изменяться, как показано в следующей программе MultiDimArrayDemo:
 */
class MiltiDimArrayDemo {
    public static void main(String[] args) {
        String[][] names = {
                {"Mr. ", "Mrs. ", "Ms. "},
                {"Smith", "Jones"}
        };
        // Mr. Smith
        System.out.println(names[0][0] + names[1][0]);
        // Ms. Jones
        System.out.println(names[0][2] + names[1][1]);
    }
}
/**
 * Mr. Smith
 * Ms. Jones
 * Наконец, вы можете использовать встроенное свойство длины, чтобы определить размер любого массива. Следующий код выводит размер массива на стандартный вывод:
 *       System.out.println(anArray.length);
 *
 * -----Copying Arrays-----
 * Класс System имеет метод arraycopy, который можно использовать для эффективного копирования данных из одного массива в другой:
 *   public static void arraycopy(Object src, int srcPos,
 *                              Object dest, int destPos,
 *                              int length);
 * Два аргумента Object указывают массив для копирования и массив для копирования. Три аргумента int указывают начальную позицию в исходном массиве, начальную позицию в целевом массиве и количество копируемых элементов массива.
 *
 *
 *
 */












