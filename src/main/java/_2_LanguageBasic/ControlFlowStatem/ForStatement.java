package _2_LanguageBasic.ControlFlowStatem;

/**
 * Оператор for обеспечивает компактный способ итерации по
 * диапазону значений. Программисты часто называют его «циклом
 * for» из-за того, как он многократно повторяется, пока не
 * будет выполнено определенное условие. Общая форма заявления
 * for может быть выражена следующим образом:
 *      for (initialization; termination;
 *      increment) {
 *        statement(s)
 *      }
 * При использовании этой версии оператора for:
 * - Выражение инициализации инициализирует цикл; выполняется
 *      один раз, как начинается цикл.
 * - Когда выражение завершения оценивается как ложное, цикл завершается.
 * - Выражение приращения вызывается после каждой итерации
 *  `   цикла; для этого выражения вполне допустимо увеличивать
 *      или уменьшать значение.
 * Следующая программа ForDemo использует общую форму оператора for для вывода чисел от 1 до 10 в стандартный вывод:
 */
public class ForStatement {
}

class ForDemo {
    public static void main(String[] args){
        for(int i=1; i<11; i++){
            System.out.println("Count is: " + i);
        }
    }
} /*    Count is: 1
        Count is: 2
        Count is: 3
        Count is: 4
        Count is: 5
        Count is: 6
        Count is: 7
        Count is: 8
        Count is: 9
        Count is: 10  */
/**
 * код объявляет переменную в выражении инициализации. Область
 * действия этой переменной простирается от ее объявления до
 * конца блока, управляемого оператором for, поэтому ее можно
 * использовать также в выражениях завершения и приращения.
 * Если переменная, управляющая оператором for, не требуется
 * вне цикла, лучше всего объявить переменную в выражении
 * инициализации. Имена i, j и k часто используются для управления
 * циклами; объявление их в выражении инициализации ограничивает
 * срок их службы и уменьшает количество ошибок.
 * Три выражения цикла for являются необязательными; бесконечный
 * цикл может быть создан следующим образом:
     * // infinite loop
     * for ( ; ; ) {
     *     // your code goes here
     * }
 * Оператор for также имеет другую форму, предназначенную для
 * итерации по коллекциям и массивам. Эту форму иногда называют
 * расширенной инструкцией for, и ее можно использовать для
 * того, чтобы сделать ваши циклы более компактными и удобными
 * для чтения. Для демонстрации рассмотрим следующий массив,
 * который содержит числа от 1 до 10:
 *      int[] numbers = {1,2,3,4,5,6,7,8,9,10};
 */
class EnhancedForDemo {
    public static void main(String[] args){
        int[] numbers =
                {1,2,3,4,5,6,7,8,9,10};
        for (int item : numbers) {
            System.out.println("Count is: " + item);
        }
    }
} /*    Count is: 1
        Count is: 2
        Count is: 3
        Count is: 4
        Count is: 5
        Count is: 6
        Count is: 7
        Count is: 8
        Count is: 9
        Count is: 10  */
/**
 * В этом примере переменная item содержит текущее значение
 * из массива чисел. Вывод из этой программы такой же, как и раньше:
 * Рекомендуется использовать эту форму заявления вместо общей
 * формы, когда это возможно.
 */


