package _1_ObjectOrientedProg;

/**
 * Различные виды объектов часто имеют определенное количество
 * общего между собой. Например, горные велосипеды, дорожные
 * велосипеды и тандемные велосипеды имеют общие характеристики
 * (текущая скорость, текущая частота педалирования, текущая передача).
 * Объектно-ориентированное программирование позволяет классам
 * наследовать часто используемые состояния и поведение от
 * других классов. В этом примере Bicycle теперь становится
 * суперклассом MountainBike, RoadBike и TandemBike. В языке
 * программирования Java каждому классу разрешено иметь один
 * прямой суперкласс, и каждый суперкласс обладает потенциалом
 * для неограниченного числа подклассов.
 */
public class Inheritance_Is {
}
/**
 * Синтаксис для создания подкласса прост. В начале объявления
 * вашего класса используйте ключевое слово extends, а затем
 * имя класса для наследования:
 */
class MountainBike extends BicycleDemo {
    // новые поля и методы, определяющие горный велосипед
    // будут идти сюда
}
/**
 * Это дает MountainBike все те же поля и методы, что и Bicycle,
 * но позволяет его коду сосредоточиться исключительно на
 * функциях, которые делают его уникальным. Это делает код
 * для ваших подклассов легко читаемым. Однако вы должны позаботиться
 * о том, чтобы правильно задокументировать состояние и поведение,
 * которое определяет каждый суперкласс, поскольку этот код
 * не будет отображаться в исходном файле каждого подкласса.
 */
