package _1_ObjectOrientedProg;

/**
 * Oбъекты определяют свое взаимодействие с внешним миром с
 * помощью методов, которые они выставляют. Методы формируют
 * интерфейс объекта с внешним миром; Например, кнопки на
 * передней панели телевизора являются интерфейсом между вами
 * и электропроводкой на другой стороне его пластикового корпуса.
 * В своей наиболее распространенной форме интерфейс представляет
 * собой группу связанных методов с пустыми телами. Поведение
 * велосипеда, если оно указано как интерфейс, может выглядеть
 * следующим образом:
 */
interface Bicycle {
    // число оборотов колеса в сек
    void changeCadence(int newValue);

    void changeGear(int newValue);

    void speedUp(int increment);

    void applyBrakes(int decrement);
}

/**
 * Чтобы реализовать этот интерфейс, имя вашего класса изменится
 * (например, на велосипед определенной марки, например,
 * ACMEBicycle), и вы будете использовать ключевое слово
 * Implements в объявлении класса: число оборотов колеса в
 * минуту:
 */
class ACMEBicycle implements Bicycle {
    int cadence = 0;
    int speed = 0;
    int gear = 1;
// Теперь компилятору потребуется, чтобы методы, изменяющие
// каденцию, смену передач, ускорение и применение тормозов,
// были реализованы. Компиляция не удастся, если эти методы
// отсутствуют в этом классе.

    public void changeCadence(int newValue) {
        cadence = newValue;
    }

    public void changeGear(int newValue) {
        gear = newValue;
    }

    public void speedUp(int increment) {
        speed = speed + increment;
    }

    public void applyBrakes(int decrement) {
        speed = speed + decrement;
    }
    void printStates() {
        System.out.println("cadence:" +
                cadence + " speed:" +
                speed + " gear:" + gear);
    }
}
/**
 * Реализация интерфейса позволяет классу стать более формальным
 * в отношении поведения, которое он обещает обеспечить.
 * Интерфейсы формируют контракт между классом и внешним миром,
 * и этот контракт применяется компилятором во время сборки.
 * Если ваш класс претендует на реализацию интерфейса, все методы,
 * определенные этим интерфейсом, должны появиться в его
 * исходном коде, прежде чем класс будет успешно скомпилирован.
 */
public class Interface_Is {
}
