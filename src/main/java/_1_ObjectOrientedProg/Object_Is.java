package _1_ObjectOrientedProg;

/**
 * Объекты являются ключом к пониманию объектно-ориентированных
 * технологий. Посмотрите вокруг прямо сейчас, и вы найдете
 * много примеров реальных объектов: ваша собака, ваш стол,
 * ваш телевизор, ваш велосипед. Реальные объекты имеют две общие
 * характеристики: все они имеют состояние и поведение. Велосипеды
 * также имеют состояние (текущая передача, текущая частота
 * педалей, текущая скорость) и поведение (переключение передач,
 * изменение частоты педалей, применение тормозов). Вы также можете
 * заметить, что некоторые объекты, в свою очередь, также будут
 * содержать другие объекты. Программные объекты концептуально
 * похожи на объекты реального мира: они также состоят из состояния
 * и связанного поведения. Объект сохраняет свое состояние в полях
 * (переменные в некоторых языках программирования) и демонстрирует
 * свое поведение через методы (функции в некоторых языках программирования).
 * Методы работают с внутренним состоянием объекта и служат основным
 * механизмом связи между объектами. Сокрытие внутреннего состояния
 * и требование выполнения всего взаимодействия с помощью методов
 * объекта известно как инкапсуляция данных - фундаментальный принцип
 * объектно-ориентированного программирования.
 * Объединение кода в отдельные программные объекты дает ряд преимуществ:
 * 1. Модульность: исходный код для объекта может быть написан и
 * поддерживается независимо от исходного кода для других
 * объектов. После создания объект может быть легко передан внутри
 * системы.
 * 2. Сокрытие информации: взаимодействуя только с методами объекта,
 * детали его внутренней реализации остаются скрытыми от внешнего мира.
 * 3. Повторное использование кода: если объект уже существует
 * (возможно, написанный другим разработчиком программного обеспечения),
 * вы можете использовать этот объект в своей программе.
 * 4. Возможность подключения и простота отладки: если конкретный
 * объект оказывается проблематичным, вы можете просто удалить его
 * из приложения и подключить другой объект в качестве замены.
 */
public class Object_Is {
}
