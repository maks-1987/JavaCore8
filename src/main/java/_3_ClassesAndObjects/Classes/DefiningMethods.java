package _3_ClassesAndObjects.Classes;

/**
 * Вот пример типичного объявления метода:
 *  public double calculateAnswer(
 *                  double wingSpan, int numberOfEngines,
 *                  double length, double grossTons) {
 *                        //do the calculation here  }
 * Единственными обязательными элементами объявления метода
 * являются возвращаемый тип метода, имя, пара круглых скобок ()
 * и тело между фигурными скобками {}.
 * В более общем смысле, объявления методов имеют шесть компонентов
 * по порядку:
 *  - Модификаторы - такие как public, private и др.
 *  - Тип возврата - тип данных значения, возвращаемого методом,
 *      или void, если метод не возвращает значение.
 *  - Имя метода - правила для имен полей применяются также
 *      к именам методов, но соглашение немного отличается.
 *  - Список параметров в круглых скобках - разделенный запятыми
 *      список входных параметров, перед которыми стоят их
 *      типы данных, заключенные в круглые скобки, (). Если
 *      параметров нет, вы должны использовать пустые скобки.
 *  - Список исключений.
 *  - Тело метода, заключенное в фигурные скобки - код метода,
 *      включая объявление локальных переменных, находится
 *      здесь.
 * ----------------------------------------------------------------
 * Naming a method
 * Хотя имя метода может быть любым допустимым идентификатором,
 * условные обозначения кода ограничивают имена методов.
 * По соглашению, имена методов должны быть глаголом в нижнем
 * регистре или именем из нескольких слов, которое начинается
 * с глагола в нижнем регистре, за которым следуют прилагательные,
 * существительные и т.д. В именах из нескольких слов первая
 * буква каждого из второго и следующих слов должна быть
 * написан с большой буквы. Вот некоторые примеры:
 *      run
 *      runFast
 *      getBackground
 * Как правило, метод имеет уникальное имя в своем классе.
 * Однако метод может иметь то же имя, что и другие методы,
 * из-за перегрузки метода.
 * --------------------------------------------------------------
 * Overloading Methods
 * Язык программирования Java поддерживает методы перегрузки,
 * и Java может различать методы с разными сигнатурами методов.
 * Это означает, что методы в классе могут иметь одно и то
 * же имя, если у них разные списки параметров (есть некоторые
 * уточнения к этому, которые будут обсуждаться в уроке
 * «Интерфейсы и наследование»).
 * Предположим, у вас есть класс, который может использовать
 * каллиграфию для рисования различных типов данных (strings,
 * integers, and so on) и который содержит метод для рисования
 * каждого типа данных. Для каждого метода неудобно использовать
 * новое имя, например drawString, drawInteger, drawFloat
 * и т.д. В языке Java можно использовать одно и то же имя
 * для всех методов рисования, но передавать разные списки
 * аргументов каждому методу. Таким образом, класс рисования
 * данных может объявлять четыре метода с именем draw, каждый
 * из которых имеет свой список параметров.
 */ /*
public class DefiningMethods {
}
public class DataArtist {
    ...
    public void draw(String s) {
        ...
    }
    public void draw(int i) {
        ...
    }
    public void draw(double f) {
        ...
    }
    public void draw(int i, double f) {
        ...
    }
} */
/**
 * Перегруженные методы различаются по количеству и типу
 * аргументов, передаваемых в метод. В примере кода
 * draw(String s) и draw(int i) являются разными и уникальными
 * методами, поскольку они требуют разных типов аргументов.
 * Вы не можете объявить более одного метода с тем же именем
 * и тем же числом и типом аргументов, потому что компилятор
 * не может их различить.
 * Компилятор не учитывает тип возвращаемого значения при
 * различении методов, поэтому вы не можете объявить два
 * метода с одинаковой сигнатурой, даже если они имеют другой
 * тип возвращаемого значения.
 *  Примечание. Перегруженные методы следует использовать
 *      с осторожностью, поскольку они могут сделать код
 *      гораздо менее читабельным.
 */





