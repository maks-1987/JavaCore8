package _3_ClassesAndObjects.Classes;

/**
 * ------Передача информации в метод или конструктор------
 * Объявление для метода или конструктора объявляет число
 * и тип аргументов для этого метода или конструктора.
 * Например, ниже приведен метод, который вычисляет ежемесячные
 * платежи по ипотечному кредиту на основе суммы кредита,
 * процентной ставки, срока кредита (количества периодов)
 * и будущей стоимости кредита:
 */
public class PassInfoToMethodOrConstr {

    public double computePayment(
            double loanAmt, // сумма кредита
            double rate, // процентная ставка
            double futureValue, // будущая стоимость
            int numPeriods) { // кол-во периодов

        double interest = rate/100.0;
        double partial1 = Math.pow((1 + interest),
                - numPeriods);
        double denominator = (1 - partial1) / interest;
        double answer = (-loanAmt / denominator) - (
                (futureValue * partial1) / denominator);
        return answer;
    }
}
/**
 * Этот метод имеет четыре параметра. Первые три - числа
 * с плавающей запятой двойной точности, а четвертое -
 * целое число. Параметры используются в теле метода и
 * во время выполнения будут принимать значения передаваемых
 * аргументов.
 * Параметры относятся к списку переменных в объявлении
 * метода. Аргументы - это фактические значения, которые
 * передаются при вызове метода. Когда вызываете метод,
 * используемые аргументы должны соответствовать параметрам
 * объявления в типе и порядке.
 * ----------Типы параметров------------------------------------
 * Вы можете использовать любой тип данных для параметра
 * метода или конструктора. Это включает в себя примитивные
 * типы данных, такие как double, float и integer и ссылочные
 * типы данных, такие как объекты и массивы.
 * Вот пример метода, который принимает массив в качестве
 * аргумента. В этом примере метод создает новый объект
 * Polygon и инициализирует его из массива объектов Point
 * (предположим, что Point является классом, представляющим
 * координаты x, y):
     * public Polygon polygonFrom(Point[] corners) {
     *     // method body goes here
     * }
 * Если вы хотите передать метод в метод, используйте
 * лямбда-выражение или ссылку на метод.
 * -------Произвольное количество аргументов-------------
 * Вы можете использовать конструкцию varargs для передачи
 * произвольного числа значений в метод. Вы используете varargs,
 * когда не знаете, сколько аргументов определенного типа
 * будет передано методу. Это ярлык для создания массива вручную
 * (предыдущий метод мог использовать varargs, а не массив).
 * Чтобы использовать varargs, тип последнего параметра следует
 * за многоточием (три точки, ...), затем пробелом и именем
 * параметра. Затем метод может быть вызван с любым номером
 * этого параметра, включая ни одного.
 *
     * public Polygon polygonFrom(Point... corners) {
     *     int numberOfSides = corners.length;
     *     double squareOfSide1, lengthOfSide1;
     *     squareOfSide1 = (corners[1].x - corners[0].x)
     *             * (corners[1].x - corners[0].x)
     *             + (corners[1].y - corners[0].y)
     *             * (corners[1].y - corners[0].y);
     *     lengthOfSide1 = Math.sqrt(squareOfSide1);
     *   // Далее следует код тела метода, который создает
 *       // и возвращает многоугольник, соединяющий точки
 *     }
 * Можно увидеть, что внутри метода углы обрабатываются как
 * массив. Метод может быть вызван либо с массивом, либо с
 * последовательностью аргументов. Код в теле метода будет
 * обрабатывать параметр как массив в любом случае.
 * Вы будете чаще всего видеть varargs с методами печати;
 * например, этот метод printf:
 *  public PrintStream printf(String format, Object... args)
 * позволяет печатать произвольное количество объектов. Это
 * можно назвать так:
 *  System.out.printf("%s: %d, %s%n", name, idnum, address);
 * или как это:
 *  System.out.printf("%s: %d, %s, %s, %s%n", name,
 *                      idnum, address, phone, email);
 * или с еще другим количеством аргументов.
 * -----------------Имена параметров--------------------
 *
 *
 *
 *
 *
 *
 */









