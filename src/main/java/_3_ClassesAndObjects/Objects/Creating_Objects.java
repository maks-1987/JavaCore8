package _3_ClassesAndObjects.Objects;

/**
 * ---------------Создание объектов-----------------------------
 * Класс обеспечивает план для объектов; мы создаем объект из
 * класса. Каждый из следующих операторов, взятых из программы
 * CreateObjectDemo, создает объект и присваивает его переменной:
 *          -------------------------------
 *  Point originOne = new Point(23, 94);
 *  Rectangle rectOne = new Rectangle(originOne, 100, 200);
 *  Rectangle rectTwo = new Rectangle(50, 100);
 *          -------------------------------
 * Первая строка создает объект класса Point, а вторая и
 * третья строки создают объект класса Rectangle.
 * Каждое из этих утверждений состоит из трех частей:
 *  1. Declaration: (объявление)  это все объявления переменных,
 *      которые связывают имя переменной с типом объекта.
 *  2. Instantiation: new - ключевое слово - это оператор
 *      Java, который создает объект.
 *  3. Initialization: за оператором new следует вызов конструктора,
 *      который инициализирует новый объект.
 * -----Объявление переменной для ссылки на объект---------
 * для объявления переменной пишут:
 *  type name;
 * Это уведомляет компилятор, что вы будете использовать имя
 * для ссылки на данные, тип которых является типом. Для
 * примитивной переменной это объявление также резервирует
 * необходимый объем памяти для переменной.
 * Также можно объявить ссылочную переменную в отдельной
 * строке. Например:
 *  Point originOne;
 * Если объявить originOne таким образом, его значение будет
 * неопределенным до тех пор, пока объект не будет создан и
 * назначен ему. Простое объявление ссылочной переменной
 * не создает объект. Для этого нужно использовать оператор
 * new. Вы должны назначить объект originOne, прежде чем
 * использовать его в своем коде. В противном случае получите
 * ошибку компилятора.
 * Переменная в этом состоянии, которая в настоящее время
 * не ссылается на объект, может быть проиллюстрирована следующим
 * образом (the variable name, originOne, plus a reference
 * pointing to nothing).
 * -----Создание класса (Instantiating a Class)------------
 * Оператор new создает экземпляр класса, выделяя память
 * для нового объекта и возвращая ссылку на эту память. Оператор
 * new также вызывает конструктор объекта.
 * Фраза «создание экземпляра класса» означает то же самое,
 * что и «создание объекта». Когда вы создаете объект, вы
 * создаете «экземпляр» класса, следовательно, «создаете»
 * экземпляр класса.
 * Оператору new требуется один постфиксный аргумент: вызов
 * конструктора. Имя конструктора предоставляет имя класса
 * для создания экземпляра.
 * Оператор new возвращает ссылку на созданный объект. Эта
 * ссылка обычно присваивается переменной соответствующего
 * типа, например:
 *  Point originOne = new Point(23, 94);
 * Ссылка, возвращаемая оператором new, не должна присваиваться
 * переменной. опер new также может быть использован непосредственно
 * в выражении. Например:
 *  int height = new Rectangle().height;
 * -----Initializing an Object (Инициализация объекта)--------
 * Вот код для класса Point:
 *
 *  public class Point {
 *     public int x = 0;
 *     public int y = 0;
 *     //constructor
 *     public Point(int a, int b) {
 *         x = a;
 *         y = b;
 *     }
 *  }
 *
 * Этот класс содержит один конструктор. Вы можете распознать
 * конструктор, потому что его объявление использует то же имя,
 * что и класс, и у него нет возвращаемого типа. Конструктор в
 * классе Point принимает два целочисленных аргумента, объявленных
 * кодом (int a, int b). Следующее утверждение предоставляет
 * 23 и 94 в качестве значений для этих аргументов:
 *  Point originOne = new Point(23, 94);
 * Результат выполнения этого оператора может быть проиллюстрирован
 * на следующем рисунке:
 *                    __________ A Point object
 *           ___     |    ____   |
 *          |   |    |  x|_23_|  |
 * originOne| 0 |--->|    ____   |
 *          |___|    |  y|_94_|  |
 *                   |___________|
 *
 * Вот код для класса Rectangle, который содержит четыре
 * конструктора:
 */
class Point {
    int x = 0;
    int y = 0;
    //constructor
    Point(int a, int b) {
        x = a;
        y = b;
    }
}
class Rectangle {
    int width = 0;
    int height = 0;
    Point origin;

    // four constructors
    public Rectangle() {
        origin = new Point(0, 0);
    }
    public Rectangle(Point p) {
        origin = p;
    }
    public Rectangle(int w, int h) {
        origin = new Point(0, 0);
        width = w;
        height = h;
    }
    public Rectangle(Point p, int w, int h) {
        origin = p;
        width = w;
        height = h;
    }
    // a method for moving the rectangle
    public void move(int x, int y) {
        origin.x = x;
        origin.y = y;
    }
    // a method for computing the area of the rectangle
    public int getArea() {
        return width * height;
    }
}
/**
 * Каждый конструктор позволяет вам предоставлять начальные \
 * значения для начала, ширины и высоты прямоугольника,
 * используя примитивные и ссылочные типы. Если класс имеет
 * несколько конструкторов, они должны иметь разные подписи.
 * Компилятор Java различает конструкторы по количеству и
 * типу аргументов. Когда компилятор Java встречает следующий
 * код, он знает, как вызвать конструктор в классе Rectangle,
 * который требует аргумент Point, за которым следуют два
 * целочисленных аргумента:
 *  Rectangle rectOne = new Rectangle(originOne, 100, 200);
 * Это вызывает один из конструкторов Rectangle, который
 * инициализирует origin к originOne. Кроме того, конструктор
 * устанавливает ширину 100 и высоту 200. Теперь есть две ссылки
 * на один и тот же объект Point - объект может иметь несколько
 * ссылок на него, как показано на следующем рисунке:
 *
 *  originOne 0___
 *               |            _________ A Point object
 *               |           |          |
 *               ----------->| x | 23 | |
 *                           |          |
 *               ----------->| y | 94 | |
 *  _____________|___        |__________|
 * |   origin 0__|  |
 * |                |
 * | width  | 100 | |
 * |                |
 * | height | 200 | |
 * |________________ A Rectangle object
 *
 * Следующая строка кода вызывает конструктор Rectangle,
 * который требует двух целочисленных аргументов, которые
 * предоставляют начальные значения для ширины и высоты.
 * Если вы проверите код внутри конструктора, вы увидите,
 * что он создает новый объект Point, значения x и y которого
 * инициализированы равными 0:
 *  Rectangle rectTwo = new Rectangle(50, 100);
 * Конструктор Rectangle, используемый в следующем выражении,
 * не принимает никаких аргументов, поэтому он называется конструктором
 * без аргументов:
 *  Rectangle rect = new Rectangle();
 * Все классы имеют как минимум один конструктор. Если класс
 * явно не объявляет ничего, компилятор Java автоматически
 * предоставляет конструктор без аргументов, называемый конструктором
 * по умолчанию. Этот конструктор по умолчанию вызывает
 * конструктор родительского класса без аргумента или конструктор
 * Object, если у класса нет другого родителя. Если у родителя
 * нет конструктора (у Object он есть), компилятор отклонит
 * программу.
 */
public class Creating_Objects {}

