package _3_ClassesAndObjects.Objects;

/**
 * Создав объект, вы, вероятно, захотите использовать его для
 * чего-то. Вам может понадобиться использовать значение одного
 * из его полей, изменить одно из его полей или вызвать один
 * из его методов для выполнения действия.
 * -----------Ссылка на поля объекта-------------------------
 * Доступ к полям объекта осуществляется по их имени. Надо использовать
 * однозначное имя. Можено использовать простое имя для поля
 * в своем собственном классе. Например, мы можем добавить
 * заявление в Rectangle классе, который печатает width и height:
 *      System.out.println("Width and height are: " +
 *                         width + ", " + height);
 * В этом случае, width & height простые имена.
 * Код, находящийся вне класса объекта, должен использовать
 * ссылку на объект или выражение, за которым следует оператор
 * точки (.), за которым следует простое имя поля, например:
 *      objectReference.fieldName
 * Например, код в классе CreateObjectDemo находится вне
 * кода для класса Rectangle. Таким образом, чтобы ссылаться
 * на поля origin, width и height в объекте Rectangle с именем
 * rectOne, класс CreateObjectDemo должен использовать имена
 * rectOne.origin, rectOne.width и rectOne.height соответственно.
 * Программа использует два из этих имен для отображения ширины
 * и высоты rectOne:
 *  System.out.println("Width of rectOne: "  + rectOne.width);
 *  System.out.println("Height of rectOne: " + rectOne.height);
 * Попытка использовать простые имена width и height из кода
 * в классе CreateObjectDemo не имеет смысла - эти поля
 * существуют только внутри объекта - и приводит к ошибке
 * компилятора.
 * Позже программа использует похожий код для отображения
 * информации о rectTwo. Объекты одного и того же типа имеют
 * свои собственные копии одинаковых полей экземпляра. Таким
 * образом, каждый объект Rectangle имеет поля с именами
 * origin, width и height. Когда вы обращаетесь к полю экземпляра
 * через ссылку на объект, вы ссылаетесь на поле этого
 * конкретного объекта. Два объекта rectOne и rectTwo в
 * программе CreateObjectDemo имеют разные поля происхождения,
 * ширины и высоты.
 * Чтобы получить доступ к полю, вы можете использовать
 * именованную ссылку на объект, как в предыдущих примерах,
 * или вы можете использовать любое выражение, которое возвращает
 * ссылку на объект. Напомним, что new оператор возвращает ссылку
 * на объект. Таким образом, можно использовать значение,
 * возвращаемое из new, для доступа к полям нового объекта:
 *      int height = new Rectangle().height;
 * Этот оператор создает новый объект Rectangle и сразу же
 * получает его высоту. По сути, оператор вычисляет высоту
 * прямоугольника по умолчанию. Обратите внимание, что после
 * того, как этот оператор был выполнен, программа больше
 * не имеет ссылки на созданный Rectangle, потому что программа
 * никогда нигде не сохраняла ссылку. На объект не ссылаются,
 * и его ресурсы могут свободно перерабатываться виртуальной
 * машиной Java.
 * --------------Вызов методов объекта-------------------------
 * Также используйте ссылку на объект для вызова метода объекта.
 * Вы добавляете простое имя метода к ссылке на объект с
 * помощью промежуточного точечного оператора (.). Кроме
 * того, в прилагаемых скобках вы указываете любые аргументы
 * метода. Если метод не требует никаких аргументов, используйте
 * пустые скобки.
 *      objectReference.methodName(argumentList);
 * или
 *      objectReference.methodName();
 * Класс Rectangle имеет два метода: getArea() для вычисления
 * площади прямоугольника и move() для изменения источника
 * прямоугольника. Вот код CreateObjectDemo, который вызывает
 * эти два метода:
 *  System.out.println("Area of rectOne: " + rectOne.getArea());
 *  ...
 *  rectTwo.move(40, 72);
 * Первый оператор вызывает метод rectOne's getArea() и
 * отображает результаты. Вторая строка перемещает rectTwo,
 * потому что метод move() присваивает новые значения объектам
 * origin.x и origin.y.
 * Как и в случае с полями экземпляра, objectReference должна
 * быть ссылкой на объект. Вы можете использовать имя переменной,
 * но также можете использовать любое выражение, которое
 * возвращает ссылку на объект. Оператор new возвращает
 * ссылку на объект, поэтому можете использовать значение,
 * возвращаемое из new, для вызова методов нового объекта:
 *      new Rectangle(100, 50).getArea()
 * Это выражение возвращает ссылку на объект, которая ссылается
 * на объект Rectangle. Как показано, вы можете использовать
 * точечную нотацию для вызова метода getArea() нового
 * Rectangle для вычисления площади нового прямоугольника.
 * Некоторые методы, такие как getArea(), возвращают значение.
 * Для методов, которые возвращают значение, можно использовать
 * вызов метода в выражениях. Вы можете присвоить возвращаемое
 * значение переменной, использовать его для принятия
 * решений или управления циклом. Этот код присваивает
 * значение, возвращаемое getArea() переменной areaOfRectangle:
 *   int areaOfRectangle = new Rectangle(100, 50).getArea();
 * Помните, что вызов метода для конкретного объекта аналогичен
 * отправке сообщения этому объекту. В этом случае объект,
 * для которого вызывается getArea(), является прямоугольником,
 * возвращаемым конструктором.
 * ---------The Garbage Collector (Сборщик мусора)----------
 * Некоторые объектно-ориентированные языки требуют, чтобы вы
 * отслеживали все создаваемые объекты и явно уничтожали их,
 * когда они больше не нужны. Управление памятью явно утомительно
 * и подвержено ошибкам. Платформа Java позволяет вам создавать
 * столько объектов, сколько вы хотите (конечно, ограниченные
 * возможностями вашей системы), и вам не нужно беспокоиться
 * об их уничтожении. Среда выполнения Java удаляет объекты,
 * когда определяет, что они больше не используются. Этот
 * процесс называется сборкой мусора.
 * Объект имеет право на сборку мусора, когда больше нет
 * ссылок на этот объект. Ссылки, хранящиеся в переменной,
 * обычно удаляются, когда переменная выходит из области
 * видимости. Или вы можете явно удалить ссылку на объект,
 * установив для переменной специальное значение null.
 * Помните, что программа может иметь несколько ссылок на
 * один и тот же объект; все ссылки на объект должны быть
 * отброшены до того, как объект будет разрешен для сборки
 * мусора.
 * Среда выполнения Java имеет сборщик мусора, который
 * периодически освобождает память, используемую объектами,
 * на которые больше нет ссылок. Сборщик мусора выполняет
 * свою работу автоматически, когда определяет, что пришло
 * время.
 */
public class Using_Objects {
}




